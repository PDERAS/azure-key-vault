<?php

namespace Pderas\AzureKeyVault;

use Carbon\Carbon;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Process;
use Illuminate\Support\Facades\URL;
use Pderas\AzureKeyVault\Enums\AzureEndpoint;
use Str;

class AzureKeyVault
{
    /**
     * Azure Key Vault API version
     * 
     * @var string
     */
    private const API_VERSION = '7.4';

    /**
     * Azure Key Vault Base URL. Example: https://my-key-vault.vault.azure.net/
     */
    protected string $vault_base_url;

    /**
     * Name of the key in Azure Key Vault
     */
    protected string $key_name;

    /**
     * The access token generated by Azure Key Vault
     */
    protected ?string $token = null;

    /**
     * The expiry date of the Access Token
     */
    protected Carbon $token_expiry;

    /**
     * Whether to use the Azure CLI to generate the access token
     */
    protected bool $use_azure_cli = false;

    /**
     * Guzzle HTTP Client
     */
    protected Client $client;

    public function __construct()
    {
        $config = config('azure_vault');

        $this->vault_base_url = $config['vault_base_url'];
        $this->key_name = $config['key_name'];
        $this->use_azure_cli = $config['use_azure_cli'];
    
        $this->client = new Client();
    }

    /**
     * Sign the data using the Azure Key Vault
     */
    public function sign(string $data)
    {
        $this->getAccessToken();

        // Reference: https://learn.microsoft.com/en-us/rest/api/keyvault/keys/sign/sign?view=rest-keyvault-keys-7.4
        $payload = json_encode([
            'alg'   => 'RS512',
            'value' => $this->hash($data),
        ]);

        try {
            $response = $this->request(
                'POST',
                $this->buildUrl(AzureEndpoint::SIGN),
                ['body' => $payload]
            );

            return [
                'signature'   => $response['value'],
                'key_version' => $this->getCurrentKeyVersion(),
            ];
        } catch (ClientException $e) {
            // Log a non-truncated error message
            Log::error($e, [
                'response' => (string) $e->getResponse()->getBody()
            ]);
        }
    }

    /**
     * Retrieve an access token from Azure Key Vault
     */
    protected function getAccessToken(): void
    {
        if ($this->token && $this->token_expiry->isFuture()) {
            return;
        }

        if ($this->use_azure_cli) {
            $azure_cli_result = Process::run('az account get-access-token --resource https://vault.azure.net');
            $token_output = json_decode($azure_cli_result->output(), true);

            $this->token = Arr::get($token_output, 'accessToken');
            $this->token_expiry = Carbon::parse(Arr::get($token_output, 'expiresOn'));
        } else {
            // TODO: Implement Managed Identity
        }
    }

    /**
     * Hash the data using SHA-512 and return the base64 encoded value
     */
    protected function hash(string $data): string
    {
        // Use binary encoded hash
        $hashed_value = hash('sha512', $data, true);

        return base64_encode($hashed_value);
    }

    /**
     * Get the current key version
     */
    protected function getCurrentKeyVersion(): ?string
    {
        $url = $this->getKeyVersionUrl();
        
        // Return the last part of the URL which is the key version
        return Str::afterLast($url, '/');
    }

    /**
     * Get the full key version URL
     */
    protected function getKeyVersionUrl(): ?string
    {
        $url = $this->buildUrl(AzureEndpoint::VERSIONS, [
            'maxresults' => 1
        ]);

        $response = $this->request('GET', $url);
        
        // Get the first key version (full URL)
        return Arr::get($response, 'value.0.kid');
    }

    /**
     * Make a request to the Azure Key Vault
     */
    protected function request(string $method, string $url, array $options = []): ?array
    {
        $options['headers'] = [
            'Authorization' => "Bearer {$this->token}",
            'Content-Type'  => 'application/json',
        ];

        $response = $this->client->request($method, $url, $options);

        return json_decode($response->getBody(), true);
    }

    /**
     * Build the URL for the Azure Key Vault
     */
    protected function buildUrl(AzureEndpoint $endpoint, array $parameters = []): string
    {
        $url = "{$this->vault_base_url}/keys/{$this->key_name}/{$endpoint->value}";

        $parameters['api-version'] = self::API_VERSION;

        return URL::query($url, $parameters);
    }
}
